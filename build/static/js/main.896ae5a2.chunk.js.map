{"version":3,"sources":["App.js","router/index.js","Child.js","GrandChild.js","Root.js","serviceWorker.js","index.js"],"names":["Home","About","Topics","props","match","useRouteMatch","to","url","path","Topic","topicId","useParams","App","routes","exact","component","console","log","matchRoutes","renderRoutes","route","someProp","Root","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"sMA+CA,SAASA,IACP,OAAO,oCAGT,SAASC,IACP,OAAO,qCAGT,SAASC,EAAOC,GACd,IAAIC,EAAQC,cACZ,OACE,6BACE,sCACA,4BACE,4BACE,kBAAC,IAAD,CAAMC,GAAE,UAAKF,EAAMG,IAAX,gBAAR,eAEF,4BACA,kBAAC,IAAD,CAAMD,GAAE,UAAKF,EAAMG,IAAX,mBAAR,mBAGF,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,KAAI,UAAKJ,EAAMI,KAAX,cACT,kBAACC,EAAD,OAEF,kBAAC,IAAD,CAAOD,KAAI,UAAKJ,EAAMI,OACpB,yDAOV,SAASC,EAAMN,GAAQ,IACfO,EAAYC,cAAZD,QACN,OAAO,mDAAyBA,GAGnBE,IC/DAC,EAlBA,CACb,CACEL,KAAM,IACNM,OAAO,EACPC,UDGJ,SAAaZ,GACX,OACE,kBAAC,IAAD,KACE,6BACE,6BACE,4BACE,4BACE,kBAAC,IAAD,CAASG,GAAG,KAAZ,SAEF,4BACE,kBAAC,IAAD,CAAMA,GAAG,UAAT,UAEF,4BACE,kBAAC,IAAD,CAAMA,GAAG,WAAT,aAON,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOE,KAAK,UACV,kBAACP,EAAD,OAEF,kBAAC,IAAD,CAAOO,KAAK,WACV,kBAACN,EAAD,OAEF,kBAAC,IAAD,CAAOM,KAAK,KACV,kBAACR,EAAD,YC7BV,CACEQ,KAAM,aACNO,UCRU,SAACZ,GAuBb,OAtBAa,QAAQC,IAAId,GAqBZa,QAAQC,IAAI,cAAeC,YAAYL,EAAQ,cAE7C,6BACE,qCAGCM,YAAahB,EAAMiB,MAAMP,OAAQ,CAAEQ,SAAU,qCDnBhDR,OAAQ,CACN,CACEL,KAAM,yBACNO,UEbW,SAACZ,GAElB,OADAa,QAAQC,IAAId,GAEV,6BACE,2CAEA,6BAAMA,EAAMkB,gBCSHC,EAbF,SAACnB,GACZ,OACE,kBAAC,IAAD,KACE,6BACE,oCAGCgB,YAAaN,MCAFU,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAAStB,MACvB,2DCbNuB,IAASC,OAAO,kBAAC,EAAD,MAAUC,SAASC,eAAe,SD8H5C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLtB,QAAQsB,MAAMA,EAAMC,c","file":"static/js/main.896ae5a2.chunk.js","sourcesContent":["import React from 'react';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link,\n  NavLink,\n  useRouteMatch,\n  useParams\n} from \"react-router-dom\";\n\nfunction App(props) {\n  return (\n    <Router>\n      <div>\n        <nav>\n          <ul>\n            <li>\n              <NavLink to=\"/\">Home</NavLink>\n            </li>\n            <li>\n              <Link to=\"/about\">About</Link>\n            </li>\n            <li>\n              <Link to=\"/topics\">Topics</Link>\n            </li>\n          </ul>\n        </nav>\n\n        {/* A <Switch> looks through its children <Route>s and\n            renders the first one that matches the current URL. */}\n        <Switch>\n          <Route path=\"/about\">\n            <About />\n          </Route>\n          <Route path=\"/topics\">\n            <Topics />\n          </Route>\n          <Route path=\"/\">\n            <Home />\n          </Route>\n        </Switch>\n      </div>\n    </Router>\n  );\n}\n\nfunction Home() {\n  return <h2>Home</h2>;\n}\n\nfunction About() {\n  return <h2>About</h2>;\n}\n\nfunction Topics(props) {\n  let match = useRouteMatch();\n  return (\n    <div>\n      <h2>Topics</h2>\n      <ul>\n        <li>\n          <Link to={`${match.url}/components`}>Components</Link>\n        </li>\n        <li>\n        <Link to={`${match.url}/props-v-state`}>Props v.state</Link>\n        </li>\n      </ul>\n      <Switch>\n        <Route path={`${match.path}/:topicId`}>\n          <Topic />\n        </Route>\n        <Route path={`${match.path}`}>\n          <h3>Please select a Topic.</h3>\n        </Route>\n      </Switch>\n    </div>\n  )\n}\n\nfunction Topic(props) {\n  let { topicId } = useParams();\n  return <h3>Requested topic ID: {topicId}</h3>\n}\n\nexport default App;\n","import App from '../App';\r\nimport Child from '../Child.js';\r\nimport GrandChild from '../GrandChild';\r\n\r\nconst routes = [\r\n  {\r\n    path: \"/\",\r\n    exact: true,\r\n    component: App\r\n  },\r\n  {\r\n    path: \"/child/:id\",\r\n    component: Child,\r\n    routes: [\r\n      {\r\n        path: \"/child/:id/grand-child\",\r\n        component: GrandChild\r\n      }\r\n    ]\r\n  }\r\n];\r\n\r\nexport default routes;","import React from 'react';\r\nimport routes from './router/index'; // 只做 matchRoutes API 演示使用\r\nimport {renderRoutes, matchRoutes} from 'react-router-config';\r\n\r\nconst Child = (props) => {\r\n  console.log(props)\r\n  /* \r\n    props: {\r\n      history: ...,\r\n      location: ...,\r\n      match: ...,\r\n      route: ...,\r\n      staticContext: ...,\r\n      其他自定义传入的属性: ...\r\n    }\r\n  */\r\n  /* \r\n    matchRoutes 查找匹配的路由，返回一个匹配的数组\r\n    [\r\n      {\r\n        match: ...,\r\n        route: ...\r\n      },\r\n      ...\r\n    ]\r\n  */\r\n  console.log('matchRoutes', matchRoutes(routes, \"/child/45\"));\r\n  return (\r\n    <div>\r\n      <h2>Child</h2>\r\n      {/* child routes won't render without this */}\r\n      {/* 渲染当前路由下的子路由所对应的组件，第二个参数是给子路由传入的额外自定义的参数 */}\r\n      {renderRoutes(props.route.routes, { someProp: \"these extra props are optional\" })}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Child;","import React from 'react';\r\n// import {renderRoutes} from 'react-router-config'; 当前路由下没有子路由了，无需再使用 renderRoutes\r\n\r\nconst GrandChild = (props) => {\r\n  console.log(props)\r\n  return (\r\n    <div>\r\n      <h3>Grand Child</h3>\r\n      {/* 拿到父路由组件传入的自定义属性 */}\r\n      <div>{props.someProp}</div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default GrandChild;","import React from 'react';\r\nimport {renderRoutes} from 'react-router-config';\r\nimport {BrowserRouter as Router} from 'react-router-dom';\r\nimport routes from './router/index'; // 导入路由配置文件\r\n\r\nconst Root = (props) => {\r\n  return (\r\n    <Router>\r\n      <div>\r\n        <h1>Root</h1>\r\n        {/* child routes won't render without this */}\r\n        {/* 渲染匹配路径的路由组件 */}\r\n        {renderRoutes(routes)}\r\n      </div>\r\n    </Router>\r\n  );\r\n};\r\n\r\nexport default Root;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Root from './Root';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Root />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}